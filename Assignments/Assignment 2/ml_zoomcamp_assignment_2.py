# -*- coding: utf-8 -*-
"""ML_Zoomcamp_Assignment_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zvV-JnL37_kMiP5YtHOTxtosD1H14Imf
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

data = 'https://raw.githubusercontent.com/alexeygrigorev/datasets/master/car_fuel_efficiency.csv'

!wget $data

df = pd.read_csv(data)

df

df.info()

features = list(df.columns.drop(['num_cylinders', 'acceleration', 'origin', 'drivetrain', 'num_doors' ]))

features

df = df[features]

df

df.isna().sum()

df.horsepower.median()

df.nunique()

sns.histplot(df.fuel_efficiency_mpg, bins = 50)

"""This is not a long tail but a normal distribution."""

df.fuel_efficiency_mpg.max()

n = len(df)
n_test = int(n * 0.2)
n_val = int(n * 0.2)
n_train = n - n_test - n_val

n_train, n_val, n_test

idx = np.arange(n)

idx

np.random.seed(42)
np.random.shuffle(idx)

idx

train_df = df.iloc[idx[:n_train]]
val_df = df.iloc[idx[n_train:n_train + n_val]]
test_df = df.iloc[idx[n_train +n_val:]]

train_df

val_df

test_df

len(train_df), len(val_df), len(test_df)

train_df = train_df.reset_index(drop =True)
val_df = val_df.reset_index(drop = True)
test_df = test_df.reset_index(drop = True)

train_df

val_df

test_df

y_train = train_df.fuel_efficiency_mpg
y_val = val_df.fuel_efficiency_mpg
y_test = test_df.fuel_efficiency_mpg

del train_df['fuel_efficiency_mpg']
del val_df['fuel_efficiency_mpg']
del test_df['fuel_efficiency_mpg']

train_df

val_df

test_df

df.model_year.max()

def prepare_X_mean(data):
    df = data.copy()
    features_new = features.copy()
    df['age'] = 2023 - df.model_year
    features_new.append('age')

    for v in ['Diesel', 'Gasoline']:
        df[f'fuel_type_{v.lower()}'] = (df.fuel_type == v).astype('int')
        features_new.append(f'fuel_type_{v.lower()}')

    if 'fuel_type' in df.columns:
        del df['fuel_type']
        features_new.remove('fuel_type')

    if 'fuel_efficiency_mpg' in features_new:
        features_new.remove('fuel_efficiency_mpg')

    mean_value = df[features_new].mean()
    df_num = df[features_new].fillna(mean_value)
    if 'model_year' in df_num.columns:
      del df_num['model_year']
    X = df_num.values
    return X

def prepare_X_zero(data):
    df = data.copy()
    features_new = features.copy()
    df['age'] = 2023 - df.model_year
    features_new.append('age')

    for v in ['Diesel', 'Gasoline']:
        df[f'fuel_type_{v.lower()}'] = (df.fuel_type == v).astype('int')
        features_new.append(f'fuel_type_{v.lower()}')

    if 'fuel_type' in df.columns:
        del df['fuel_type']
        features_new.remove('fuel_type')

    if 'fuel_efficiency_mpg' in features_new:
        features_new.remove('fuel_efficiency_mpg')

    df_num = df[features_new]
    df_num = df[features_new].fillna(0)
    if 'model_year' in df_num.columns:
      del df_num['model_year']
    X = df_num.values
    return X

def train_linear_regression(X, y):
    ones = np.ones(X.shape[0])
    X = np.column_stack([ones, X]) #This is to create a colum of ones in the position 0 of X

    XTX = X.T.dot(X)
    XTX_inv = np.linalg.inv(XTX)
    w_full = XTX_inv.dot(X.T).dot(y)


    return w_full[0], w_full[1:] # bias, weights

def rmse(y, y_pred):
    squared_error = (y - y_pred) ** 2
    mse = squared_error.mean()
    return np.sqrt(mse)

X_train = prepare_X_mean(train_df)
w0, w = train_linear_regression(X_train, y_train)

X_train

w0, w

y_pred = w0 + X_train.dot(w)

y_pred

train_score = rmse(y_train, y_pred)

print(round(train_score, 2))

X_val = prepare_X_zero(val_df)
yval_pred = w0 + X_val.dot(w)

val_score = rmse(y_val, yval_pred)

print(round(val_score, 2))

def train_linear_regression_reg(X, y, r = 0.001):
    ones = np.ones(X.shape[0])
    X = np.column_stack([ones, X]) #This is to create a colum of ones in the position 0 of X

    XTX = X.T.dot(X)
    XTX = XTX + r * np.eye(XTX.shape[0])  #Regularization
    XTX_inv = np.linalg.inv(XTX)
    w_full = XTX_inv.dot(X.T).dot(y)


    return w_full[0], w_full[1:] # bias, weights

for r in [0, 0.01, 0.1, 1, 5, 10, 100]:
    X_train = prepare_X_zero(train_df)
    w0, w = train_linear_regression_reg(X_train, y_train, r=r)

    X_val = prepare_X_zero(val_df)
    yval_pred = w0 + X_val.dot(w)
    score = rmse(y_val, yval_pred)

    print(f'r = {round(r, 2)}, w0 = {round(w0, 2)}, scores = {round(score, 2)}')

for r in [0, 0.01, 0.1, 1, 5, 10, 100]:
    X_train = prepare_X_mean(train_df)
    w0, w = train_linear_regression_reg(X_train, y_train, r=r)

    X_val = prepare_X_mean(val_df)
    yval_pred = w0 + X_val.dot(w)
    score = rmse(y_val, yval_pred)

    print(f'r = {round(r, 2)}, w0 = {round(w0, 2)}, scores = {round(score, 2)}')

"""This confirms that filling the missing values with the mean was the right choice."""

def prepare_X_zero(data):
    df = data.copy()
    features_new = features.copy()
    df['age'] = 2023 - df.model_year
    features_new.append('age')

    for v in ['Diesel']:
        df[f'fuel_type_{v.lower()}'] = (df.fuel_type == v).astype('int')
        features_new.append(f'fuel_type_{v.lower()}')

    if 'fuel_type' in df.columns:
        del df['fuel_type']
        features_new.remove('fuel_type')

    if 'fuel_efficiency_mpg' in features_new:
        features_new.remove('fuel_efficiency_mpg')

    df_num = df[features_new]
    df_num = df[features_new].fillna(0)
    if 'model_year' in df_num.columns:
      del df_num['model_year']
    X = df_num.values
    return X

"""I edited the function "prepare_X_zero" because of redundant dummy variable out of fuel_type_diesel and fuel_type_gasoline

"""

rmses = []

for i in range(10):
  np.random.seed(i)

  idx = np.arange(n)
  np.random.shuffle(idx)

  train_df = df.iloc[idx[:n_train]]
  val_df = df.iloc[idx[n_train:n_train + n_val]]
  test_df = df.iloc[idx[n_train + n_val:]]

  y_train = train_df.fuel_efficiency_mpg
  y_val = val_df.fuel_efficiency_mpg
  y_test = test_df.fuel_efficiency_mpg

  del train_df['fuel_efficiency_mpg']
  del val_df['fuel_efficiency_mpg']
  del test_df['fuel_efficiency_mpg']

  X_train = prepare_X_zero(train_df)
  w0, w = train_linear_regression(X_train, y_train)

  X_val = prepare_X_zero(val_df)
  yval_pred = w0 + X_val.dot(w)
  score = rmse(y_val, yval_pred)

  rmses.append(score)
  print(f"Seed: {i} RMSE: {score:.3f}")

std_value = np.std(rmses)
print(f"\nStandard deviation of RMSEs: {round(std_value, 3)}")

rmses = []

for i in range(10):
  np.random.seed(i)

  idx = np.arange(n)
  np.random.shuffle(idx)

  train_df = df.iloc[idx[:n_train]]
  val_df = df.iloc[idx[n_train:n_train + n_val]]
  test_df = df.iloc[idx[n_train + n_val:]]

  y_train = train_df.fuel_efficiency_mpg
  y_val = val_df.fuel_efficiency_mpg
  y_test = test_df.fuel_efficiency_mpg

  del train_df['fuel_efficiency_mpg']
  del val_df['fuel_efficiency_mpg']
  del test_df['fuel_efficiency_mpg']

  df_full_train = pd.concat([train_df, val_df])
  df_full_train = df_full_train.reset_index(drop = True)
  y_full_train = pd.concat([y_train, y_val])


  X_full_train = prepare_X_zero(df_full_train)
  w0, w = train_linear_regression_reg(X_full_train, y_full_train, r = 0.001)

  X_test = prepare_X_zero(test_df)
  ytest_pred = w0 + X_val.dot(w)
  score = rmse(y_val, ytest_pred)

  rmses.append(score)
  print(f"Seed: {i} RMSE: {score:.3f}")

